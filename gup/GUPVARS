#!/bin/sh

ROOT=$(hg root 2>/dev/null || git rev-parse --show-toplevel)

VENV="$ROOT/venv"
NPM="$ROOT/node_modules"
NPMBIN="$NPM/.bin"
PATH="$NPMBIN:$PATH"
STATIC="$ROOT/public"
DEST="$ROOT/_build"

SASS="$NPMBIN/sass -I$NPM"
AUTOPREFIXER=$NPMBIN/autoprefixer-cli
ROLLUP="$NPMBIN/rollup -c $ROOT/rollup.config.js"
if [ "x$ASSETS_PRODUCTION" != "x" ]; then
    UGLIFYJS="$NPMBIN/uglifyjs --mangle --compress"
    CLEANCSS="$NPMBIN/cleancss --s0 --semantic-merging"
    BROTLI_LEVEL="-best"
else
    UGLIFYJS="cat"
    CLEANCSS="cat"
    BROTLI_LEVEL="4"
fi

TARGET=$(pwd)/$2

# Mapped source filename
SRC=$(python -c "import re;print(re.sub('_build/', 'public/', '$TARGET'))")

# Mapped source filename, extension removed
SRC_STEM=${SRC%.*}

# Mapped source directory
SRC_DIR=$(dirname "$SRC")

findscssimports() {
	basedir=$(dirname "$1")
	for f in $(sed -Ene "/@(use|import)/s/@[a-z]* [\"\'](.*)[\"\'];/\\1/p" < "$1"); do
		try_paths="$basedir/$f $basedir/$f.scss $basedir/_$f.scss $NPM/$f"
		found=false
		for p in $try_paths; do
		    if [ -f "$p" ]; then
		    	echo "$p"
		    	(findscssimports "$p");
		    	found=true
		    	break
		    fi
		done
		if [ ! $found ]; then
		    echo "Can't find $f" >&2
		    exit 1;
		fi;
	done;
}
